/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Business.Airliner;
import Business.AirlinerDirectory;
import Business.Customer;
import Business.Flight;
import Business.FlightSchedule;
import Business.MasterFlightSchedule;
import Business.Ticket;
import Business.TicketHistory;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 15085
 */
public class MasterFlightScheduleJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MasterFlightScheduleJPanel
     */
    private JPanel cardSequenceJPanel;
    private MasterFlightSchedule flightSchedules;
    private Customer customer;
    private TicketHistory bookingHistory;

    public MasterFlightScheduleJPanel(JPanel cardSequenceJPanel, Customer customer, MasterFlightSchedule flightSchedules, TicketHistory bookingHistory) {
        initComponents();
        this.cardSequenceJPanel = cardSequenceJPanel;
        this.customer = customer;
        this.flightSchedules = flightSchedules;
        this.bookingHistory = bookingHistory;
        btnClearFilter.setEnabled(false);
        airlinesDropDown();
        sortingDropDown();
        populateTable(null);
    }

    private void airlinesDropDown() {
        Set<String> airlines = new HashSet<String>();
        for (String key : flightSchedules.getFlightSchedules().keySet()) {
            airlines.add(key);
        }
        comboBoxAirlineNames.removeAllItems();
        comboBoxAirlineNames.addItem("--Select--");
        for (String airline : airlines) {
            comboBoxAirlineNames.addItem(airline);
        }
    }
    
    private void sortingDropDown() {
        comboBoxSort.removeAllItems();
        comboBoxSort.addItem("--Select--");
        comboBoxSort.addItem("Price Low to High");
        comboBoxSort.addItem("Price High to Low");
    }

    private void populateTable(ArrayList<Flight> tempList) {
        if (tempList == null) {
            
            DefaultTableModel dtm = (DefaultTableModel) tblFlights.getModel();
            dtm.setRowCount(0);
            for (String key : flightSchedules.getFlightSchedules().keySet()) {
                String airlineName = key;
                for (Flight flight : flightSchedules.getFlightSchedules().get(key).getFlights()) {
                    flight.setAirlineName(key);
                    Object[] row = new Object[dtm.getColumnCount()];
                    row[0] = flight;
                    row[1] = airlineName;
                    row[2] = flight.getDepartureCity();
                    row[3] = flight.getArrivalCity();
                    row[4] = flight.getDeparturetime();
                    row[5] = flight.getArrivaltime();
                    row[6] = flight.getPrice();
                    row[7] = flight.getFlyDate();
                    dtm.addRow(row);
                }
            }

        } else {
            
            DefaultTableModel dtm = (DefaultTableModel) tblFlights.getModel();
            dtm.setRowCount(0);
            for (Flight flight : tempList) {
                Object[] row = new Object[dtm.getColumnCount()];
                row[0] = flight;
                row[1] = flight.getAirlineName();
                row[2] = flight.getDepartureCity();
                row[3] = flight.getArrivalCity();
                row[4] = flight.getDeparturetime();
                row[5] = flight.getArrivaltime();
                row[6] = flight.getPrice();
                row[7] = flight.getFlyDate();
                dtm.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblFlights = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtDepartureCity = new javax.swing.JTextField();
        txtArrivialCity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        btnClearFilter = new javax.swing.JButton();
        comboBoxAirlineNames = new javax.swing.JComboBox<>();
        proceedBtn = new javax.swing.JButton();
        seatBox = new javax.swing.JComboBox<>();
        bookBtn = new javax.swing.JButton();
        comboBoxSort = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        radioBtnDepteEarMor = new javax.swing.JRadioButton();
        radioBtnArrMor = new javax.swing.JRadioButton();
        radioBtnDeptAft = new javax.swing.JRadioButton();
        radiobtnDeptEve = new javax.swing.JRadioButton();
        radioBtnArrEarMor = new javax.swing.JRadioButton();
        radioBtnDepMor = new javax.swing.JRadioButton();
        radioBtnArrEve = new javax.swing.JRadioButton();
        radioBtnArrAft = new javax.swing.JRadioButton();
        labelName = new javax.swing.JLabel();
        txtFlyDate = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        tblFlights.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        tblFlights.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Model Number", "Airline Name", "Departure City", "Arrivial City", "Departure time", "Arrivial time", "Price", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFlights.setRowHeight(25);
        jScrollPane1.setViewportView(tblFlights);
        if (tblFlights.getColumnModel().getColumnCount() > 0) {
            tblFlights.getColumnModel().getColumn(0).setResizable(false);
            tblFlights.getColumnModel().getColumn(1).setResizable(false);
            tblFlights.getColumnModel().getColumn(2).setResizable(false);
            tblFlights.getColumnModel().getColumn(3).setResizable(false);
            tblFlights.getColumnModel().getColumn(4).setResizable(false);
            tblFlights.getColumnModel().getColumn(5).setResizable(false);
            tblFlights.getColumnModel().getColumn(6).setResizable(false);
            tblFlights.getColumnModel().getColumn(7).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Airline Name:");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Departure City:");

        txtDepartureCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDepartureCityActionPerformed(evt);
            }
        });

        txtArrivialCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtArrivialCityActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Arrival City:");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel4.setText("Departure Time:");

        backBtn.setBackground(new java.awt.Color(255, 255, 255));
        backBtn.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        backBtn.setText("< Back ");
        backBtn.setEnabled(false);
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel5.setText("Arrival Time:");

        btnSearch.setBackground(new java.awt.Color(255, 255, 255));
        btnSearch.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnClearFilter.setBackground(new java.awt.Color(255, 255, 255));
        btnClearFilter.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnClearFilter.setText("Clear all Filters");
        btnClearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFilterActionPerformed(evt);
            }
        });

        proceedBtn.setBackground(java.awt.Color.white);
        proceedBtn.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        proceedBtn.setText("Proceed to Seat Selection");
        proceedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedBtnActionPerformed(evt);
            }
        });

        seatBox.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        seatBox.setEnabled(false);

        bookBtn.setBackground(java.awt.Color.white);
        bookBtn.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        bookBtn.setText("Book Ticket");
        bookBtn.setEnabled(false);
        bookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookBtnActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel6.setText("Sort By:");

        radioBtnDepteEarMor.setBackground(new java.awt.Color(255, 255, 255));
        radioBtnDepteEarMor.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        radioBtnDepteEarMor.setText("Early Morning(12 am to 4:59 am)");
        radioBtnDepteEarMor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnDepteEarMorActionPerformed(evt);
            }
        });

        radioBtnArrMor.setBackground(new java.awt.Color(255, 255, 255));
        radioBtnArrMor.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        radioBtnArrMor.setText("Morning (5 am to 11:59 am)");
        radioBtnArrMor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnArrMorActionPerformed(evt);
            }
        });

        radioBtnDeptAft.setBackground(new java.awt.Color(255, 255, 255));
        radioBtnDeptAft.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        radioBtnDeptAft.setText("Afternoon(12 pm to 5:59 pm)");
        radioBtnDeptAft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnDeptAftActionPerformed(evt);
            }
        });

        radiobtnDeptEve.setBackground(new java.awt.Color(255, 255, 255));
        radiobtnDeptEve.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        radiobtnDeptEve.setText("Evening (6pm to 11:59pm)");
        radiobtnDeptEve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radiobtnDeptEveActionPerformed(evt);
            }
        });

        radioBtnArrEarMor.setBackground(new java.awt.Color(255, 255, 255));
        radioBtnArrEarMor.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        radioBtnArrEarMor.setText("Early Morning(12 am to 4:59 am)");
        radioBtnArrEarMor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnArrEarMorActionPerformed(evt);
            }
        });

        radioBtnDepMor.setBackground(new java.awt.Color(255, 255, 255));
        radioBtnDepMor.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        radioBtnDepMor.setText("Morning (5 am to 11:59 am)");
        radioBtnDepMor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnDepMorActionPerformed(evt);
            }
        });

        radioBtnArrEve.setBackground(new java.awt.Color(255, 255, 255));
        radioBtnArrEve.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        radioBtnArrEve.setText("Evening (6pm to 11:59pm)");
        radioBtnArrEve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnArrEveActionPerformed(evt);
            }
        });

        radioBtnArrAft.setBackground(new java.awt.Color(255, 255, 255));
        radioBtnArrAft.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        radioBtnArrAft.setText("Afternoon(12 pm to 5:59 pm)");
        radioBtnArrAft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnArrAftActionPerformed(evt);
            }
        });

        labelName.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        labelName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelName.setText("Book Flight");
        labelName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        txtFlyDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFlyDateActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Date:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backBtn)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radioBtnDeptAft)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(radioBtnDepteEarMor)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(radioBtnDepMor, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addComponent(radiobtnDeptEve, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(radioBtnArrAft, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(radioBtnArrEarMor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radioBtnArrMor, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(radioBtnArrEve, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(comboBoxAirlineNames, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtDepartureCity, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txtArrivialCity, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(txtFlyDate, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(comboBoxSort, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(bookBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(proceedBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnClearFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(seatBox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 228, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelName, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(backBtn)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxAirlineNames, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDepartureCity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtArrivialCity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFlyDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(radioBtnDepteEarMor)
                                    .addComponent(radioBtnDepMor))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(radioBtnDeptAft)
                                    .addComponent(radiobtnDeptEve)))
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioBtnArrEarMor)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radioBtnArrMor)
                                .addGap(18, 18, 18)
                                .addComponent(radioBtnArrEve))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(332, 332, 332)
                        .addComponent(radioBtnArrAft)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClearFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proceedBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seatBox, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(bookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(142, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtDepartureCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDepartureCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepartureCityActionPerformed

    private void txtArrivialCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtArrivialCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtArrivialCityActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        boolean searched = false;
        ArrayList<Flight> tempFlights = new ArrayList<>();
        for (String key : flightSchedules.getFlightSchedules().keySet()) {
            String airlineName = key;
            for (Flight flight : flightSchedules.getFlightSchedules().get(key).getFlights()) {
                tempFlights.add(flight);
            }
        }

        if (!comboBoxAirlineNames.getSelectedItem().equals("--Select--")) {
            tempFlights = flightSchedules.searchByAirlineName(comboBoxAirlineNames.getSelectedItem().toString());
            searched = true;
        }
        if (!txtDepartureCity.getText().equals("")) {
            tempFlights = flightSchedules.searchByDepartureCity(tempFlights, txtDepartureCity.getText());
            if (tempFlights.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No search results found");
                return;
            }
            searched = true;
        }
        if (!txtArrivialCity.getText().equals("")) {
            tempFlights = flightSchedules.searchByArrivialCity(tempFlights, txtArrivialCity.getText());
            if (tempFlights.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No search results found");
                return;
            }
            searched = true;
        }
        if (!txtFlyDate.getText().equals("")) {
            tempFlights = flightSchedules.searchByDate(tempFlights, txtFlyDate.getText());
            if (tempFlights.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No search results found");
                return;
            }
            searched = true;
        }
        if (radioBtnDepteEarMor.isSelected()) {
            tempFlights = flightSchedules.searchByDepartureTimeEarlyMorning(tempFlights);
            if (tempFlights.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No search results found");
                return;
            }
            searched = true;
        }
        if (radioBtnDepMor.isSelected()) {
            tempFlights = flightSchedules.searchByDepartureTimeMorning(tempFlights);
            if (tempFlights.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No search results found");
                return;
            }
            searched = true;
        }
        if (radioBtnDeptAft.isSelected()) {
            tempFlights = flightSchedules.searchByDepartureTimeAfternoon(tempFlights);
            if (tempFlights.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No search results found");
                return;
            }
            searched = true;
        }
        if (radiobtnDeptEve.isSelected()) {
            tempFlights = flightSchedules.searchByDepartureTimeEvening(tempFlights);
            if (tempFlights.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No search results found");
                return;
            }
            searched = true;
        }
        if (radioBtnArrEarMor.isSelected()) {
            tempFlights = flightSchedules.searchByArrivialTimeEarlyMorning(tempFlights);
            if (tempFlights.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No search results found");
                return;
            }
            searched = true;
        }
        if (radioBtnArrMor.isSelected()) {
            tempFlights = flightSchedules.searchByArrivialTimeMorning(tempFlights);
            if (tempFlights.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No search results found");
                return;
            }
            searched = true;
        }
        if (radioBtnArrAft.isSelected()) {
            tempFlights = flightSchedules.searchByArrivialTimeAfternoon(tempFlights);
            if (tempFlights.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No search results found");
                return;
            }
            searched = true;
        }
        if (radioBtnArrEve.isSelected()) {
            tempFlights = flightSchedules.searchByArrivialTimeEvening(tempFlights);
            if (tempFlights.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No search results found");
                return;
            }
            searched = true;
        }
        if(!comboBoxSort.getSelectedItem().equals("--Select--")){
           if(comboBoxSort.getSelectedItem().equals("Price Low to High")){
               Collections.sort(tempFlights,Flight::sortByPriceLowToHigh);
               
           }
           else if(comboBoxSort.getSelectedItem().equals("Price High to Low")){
               Collections.sort(tempFlights);
           }  
           searched = true;
        }
        if (searched) {
            btnClearFilter.setEnabled(true);
            populateTable(tempFlights);
        } else {
            JOptionPane.showMessageDialog(null, "Select a criteira to search");
            return;
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnClearFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFilterActionPerformed
        populateTable(null);
        comboBoxAirlineNames.setSelectedIndex(0);
        comboBoxSort.setSelectedIndex(0);
        txtArrivialCity.setText("");
        txtDepartureCity.setText("");
        txtFlyDate.setText("");
        radioBtnDepteEarMor.setSelected(false);
        radioBtnArrMor.setSelected(false);
        radioBtnDeptAft.setSelected(false);
        radiobtnDeptEve.setSelected(false);
        radioBtnArrEarMor.setSelected(false);
        radioBtnArrMor.setSelected(false);
        radioBtnArrAft.setSelected(false);
        radioBtnArrEve.setSelected(false);
    }//GEN-LAST:event_btnClearFilterActionPerformed

    private void proceedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceedBtnActionPerformed
        // TODO add your handling code here:
        
        seatBox.removeAllItems();
        seatBox.addItem("--Select--");

        int selectedRow = tblFlights.getSelectedRow();
        if (selectedRow >= 0) {
            seatBox.setEnabled(true);
            Flight f = (Flight) tblFlights.getValueAt(selectedRow, 0);
            for (String row : f.getSeat().getSeatNumber().keySet()) {
                if (f.getSeat().getSeatNumber().get(row) == 1) {
                    seatBox.addItem(row);
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a Flight");
            return;
        }
        bookBtn.setEnabled(true);
        
    }//GEN-LAST:event_proceedBtnActionPerformed

    private void bookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookBtnActionPerformed
        // TODO add your handling code here:
        if (!(seatBox.getSelectedItem().toString().equals("") || seatBox.getSelectedItem().toString().equals("--Select--") || !seatBox.isEnabled())) {
            int input = JOptionPane.showConfirmDialog(null, "Do you want to proceed?", "Confirm", JOptionPane.YES_NO_OPTION);

            if (input == 0) {
                int selectedRow = tblFlights.getSelectedRow();
                Flight f = (Flight) tblFlights.getValueAt(selectedRow, 0);

                if (!seatBox.getSelectedItem().toString().equals("--Select--")) {
                    f.getSeat().getSeatNumber().replace(seatBox.getSelectedItem().toString(), 0);
                }

                for (String row : f.getSeat().getSeatNumber().keySet()) {
                    if (f.getSeat().getSeatNumber().get(row) == 1) {
                        seatBox.addItem(row);
                    }
                }

                Ticket ticket = new Ticket();
                ticket.setFlight(f);
                ticket.setCustomer(customer);
                ticket.setSeatNumber(seatBox.getSelectedItem().toString());
                bookingHistory.getBookingHistory().add(ticket);

                TicketScreenJPanel ticketPanel = new TicketScreenJPanel(cardSequenceJPanel, customer, f, seatBox.getSelectedItem().toString());
                cardSequenceJPanel.add("TicketScreenJPanel", ticketPanel);
                CardLayout layout = (CardLayout) cardSequenceJPanel.getLayout();
                layout.next(cardSequenceJPanel);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a Seat to book a ticket");
            return;
        }


    }//GEN-LAST:event_bookBtnActionPerformed

    private void radiobtnDeptEveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radiobtnDeptEveActionPerformed
        radioBtnDepteEarMor.setSelected(false);
        radioBtnDepMor.setSelected(false);
        radioBtnDeptAft.setSelected(false);
        
    }//GEN-LAST:event_radiobtnDeptEveActionPerformed

    private void radioBtnDepteEarMorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnDepteEarMorActionPerformed
        radioBtnDepMor.setSelected(false);
        radioBtnDeptAft.setSelected(false);
        radiobtnDeptEve.setSelected(false);
    }//GEN-LAST:event_radioBtnDepteEarMorActionPerformed

    private void radioBtnArrMorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnArrMorActionPerformed
         radioBtnArrEarMor.setSelected(false);
        radioBtnArrAft.setSelected(false);
        radioBtnArrEve.setSelected(false);
    }//GEN-LAST:event_radioBtnArrMorActionPerformed

    private void radioBtnDeptAftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnDeptAftActionPerformed
        radioBtnDepteEarMor.setSelected(false);
         radioBtnDepMor.setSelected(false);
         radiobtnDeptEve.setSelected(false);
    }//GEN-LAST:event_radioBtnDeptAftActionPerformed

    private void radioBtnDepMorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnDepMorActionPerformed
        radioBtnDepteEarMor.setSelected(false);
         radioBtnDeptAft.setSelected(false);
         radiobtnDeptEve.setSelected(false);
    }//GEN-LAST:event_radioBtnDepMorActionPerformed

    private void radioBtnArrAftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnArrAftActionPerformed
        radioBtnArrMor.setSelected(false);
        radioBtnArrEarMor.setSelected(false);
        radioBtnArrEve.setSelected(false);
    }//GEN-LAST:event_radioBtnArrAftActionPerformed

    private void radioBtnArrEarMorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnArrEarMorActionPerformed
        radioBtnArrMor.setSelected(false);
        radioBtnArrAft.setSelected(false);
        radioBtnArrEve.setSelected(false);
    }//GEN-LAST:event_radioBtnArrEarMorActionPerformed

    private void radioBtnArrEveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnArrEveActionPerformed
        radioBtnArrMor.setSelected(false);
        radioBtnArrAft.setSelected(false);
        radioBtnArrEarMor.setSelected(false);
    }//GEN-LAST:event_radioBtnArrEveActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        cardSequenceJPanel.remove(this);
        CardLayout cardLayout = (CardLayout) cardSequenceJPanel.getLayout();
        cardLayout.previous(cardSequenceJPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void txtFlyDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFlyDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFlyDateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton bookBtn;
    private javax.swing.JButton btnClearFilter;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> comboBoxAirlineNames;
    private javax.swing.JComboBox<String> comboBoxSort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelName;
    private javax.swing.JButton proceedBtn;
    private javax.swing.JRadioButton radioBtnArrAft;
    private javax.swing.JRadioButton radioBtnArrEarMor;
    private javax.swing.JRadioButton radioBtnArrEve;
    private javax.swing.JRadioButton radioBtnArrMor;
    private javax.swing.JRadioButton radioBtnDepMor;
    private javax.swing.JRadioButton radioBtnDeptAft;
    private javax.swing.JRadioButton radioBtnDepteEarMor;
    private javax.swing.JRadioButton radiobtnDeptEve;
    private javax.swing.JComboBox<String> seatBox;
    private javax.swing.JTable tblFlights;
    private javax.swing.JTextField txtArrivialCity;
    private javax.swing.JTextField txtDepartureCity;
    private javax.swing.JTextField txtFlyDate;
    // End of variables declaration//GEN-END:variables

}
